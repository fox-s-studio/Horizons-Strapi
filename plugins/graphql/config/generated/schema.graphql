type Background {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Image: UploadFile
  section: Section
  pages(sort: String, limit: Int, start: Int, where: JSON): [Page]
}

type BackgroundAggregator {
  count: Int
}

type BackgroundConnection {
  values: [Background]
  groupBy: BackgroundGroupBy
  aggregate: BackgroundAggregator
}

type BackgroundConnection_id {
  key: ID
  connection: BackgroundConnection
}

type BackgroundConnectionCreatedAt {
  key: DateTime
  connection: BackgroundConnection
}

type BackgroundConnectionImage {
  key: ID
  connection: BackgroundConnection
}

type BackgroundConnectionSection {
  key: ID
  connection: BackgroundConnection
}

type BackgroundConnectionUpdatedAt {
  key: DateTime
  connection: BackgroundConnection
}

type BackgroundGroupBy {
  _id: [BackgroundConnection_id]
  createdAt: [BackgroundConnectionCreatedAt]
  updatedAt: [BackgroundConnectionUpdatedAt]
  Image: [BackgroundConnectionImage]
  section: [BackgroundConnectionSection]
}

input BackgroundInput {
  Image: ID
  pages: [ID]
  section: ID
}

input createBackgroundInput {
  data: BackgroundInput
}

type createBackgroundPayload {
  background: Background
}

input createEvenementInput {
  data: EvenementInput
}

type createEvenementPayload {
  evenement: Evenement
}

input createNewInput {
  data: NewInput
}

type createNewPayload {
  new: New
}

input createPageInput {
  data: PageInput
}

type createPagePayload {
  page: Page
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSectionInput {
  data: SectionInput
}

type createSectionPayload {
  section: Section
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteBackgroundInput {
  where: InputID
}

type deleteBackgroundPayload {
  background: Background
}

input deleteEvenementInput {
  where: InputID
}

type deleteEvenementPayload {
  evenement: Evenement
}

input deleteNewInput {
  where: InputID
}

type deleteNewPayload {
  new: New
}

input deletePageInput {
  where: InputID
}

type deletePagePayload {
  page: Page
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSectionInput {
  where: InputID
}

type deleteSectionPayload {
  section: Section
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type Evenement {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Titre: String
  Description: String
  Image: UploadFile
  section: Section
}

type EvenementAggregator {
  count: Int
}

type EvenementConnection {
  values: [Evenement]
  groupBy: EvenementGroupBy
  aggregate: EvenementAggregator
}

type EvenementConnection_id {
  key: ID
  connection: EvenementConnection
}

type EvenementConnectionCreatedAt {
  key: DateTime
  connection: EvenementConnection
}

type EvenementConnectionDescription {
  key: String
  connection: EvenementConnection
}

type EvenementConnectionImage {
  key: ID
  connection: EvenementConnection
}

type EvenementConnectionSection {
  key: ID
  connection: EvenementConnection
}

type EvenementConnectionTitre {
  key: String
  connection: EvenementConnection
}

type EvenementConnectionUpdatedAt {
  key: DateTime
  connection: EvenementConnection
}

type EvenementGroupBy {
  _id: [EvenementConnection_id]
  createdAt: [EvenementConnectionCreatedAt]
  updatedAt: [EvenementConnectionUpdatedAt]
  Titre: [EvenementConnectionTitre]
  Description: [EvenementConnectionDescription]
  Image: [EvenementConnectionImage]
  section: [EvenementConnectionSection]
}

input EvenementInput {
  Titre: String
  Description: String
  Image: ID
  section: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Background | createBackgroundPayload | updateBackgroundPayload | deleteBackgroundPayload | BackgroundConnection | BackgroundAggregator | BackgroundGroupBy | BackgroundConnection_id | BackgroundConnectionCreatedAt | BackgroundConnectionUpdatedAt | BackgroundConnectionImage | BackgroundConnectionSection | Evenement | createEvenementPayload | updateEvenementPayload | deleteEvenementPayload | EvenementConnection | EvenementAggregator | EvenementGroupBy | EvenementConnection_id | EvenementConnectionCreatedAt | EvenementConnectionUpdatedAt | EvenementConnectionTitre | EvenementConnectionDescription | EvenementConnectionImage | EvenementConnectionSection | New | createNewPayload | updateNewPayload | deleteNewPayload | NewConnection | NewAggregator | NewGroupBy | NewConnection_id | NewConnectionCreatedAt | NewConnectionUpdatedAt | NewConnectionTitre | NewConnectionDescription | NewConnectionImage | NewConnectionSection | Page | createPagePayload | updatePagePayload | deletePagePayload | PageConnection | PageAggregator | PageGroupBy | PageConnection_id | PageConnectionCreatedAt | PageConnectionUpdatedAt | PageConnectionNom | PageConnectionBackgrounds | Section | createSectionPayload | updateSectionPayload | deleteSectionPayload | SectionConnection | SectionAggregator | SectionGroupBy | SectionConnection_id | SectionConnectionCreatedAt | SectionConnectionUpdatedAt | SectionConnectionNom | SectionConnectionBackground | SectionConnectionLogo | SectionConnectionTitre | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createBackground(input: createBackgroundInput): createBackgroundPayload
  updateBackground(input: updateBackgroundInput): updateBackgroundPayload
  deleteBackground(input: deleteBackgroundInput): deleteBackgroundPayload
  createEvenement(input: createEvenementInput): createEvenementPayload
  updateEvenement(input: updateEvenementInput): updateEvenementPayload
  deleteEvenement(input: deleteEvenementInput): deleteEvenementPayload
  createNew(input: createNewInput): createNewPayload
  updateNew(input: updateNewInput): updateNewPayload
  deleteNew(input: deleteNewInput): deleteNewPayload
  createPage(input: createPageInput): createPagePayload
  updatePage(input: updatePageInput): updatePagePayload
  deletePage(input: deletePageInput): deletePagePayload
  createSection(input: createSectionInput): createSectionPayload
  updateSection(input: updateSectionInput): updateSectionPayload
  deleteSection(input: deleteSectionInput): deleteSectionPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type New {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Titre: String
  Description: String
  Image: UploadFile
  section: Section
}

type NewAggregator {
  count: Int
}

type NewConnection {
  values: [New]
  groupBy: NewGroupBy
  aggregate: NewAggregator
}

type NewConnection_id {
  key: ID
  connection: NewConnection
}

type NewConnectionCreatedAt {
  key: DateTime
  connection: NewConnection
}

type NewConnectionDescription {
  key: String
  connection: NewConnection
}

type NewConnectionImage {
  key: ID
  connection: NewConnection
}

type NewConnectionSection {
  key: ID
  connection: NewConnection
}

type NewConnectionTitre {
  key: String
  connection: NewConnection
}

type NewConnectionUpdatedAt {
  key: DateTime
  connection: NewConnection
}

type NewGroupBy {
  _id: [NewConnection_id]
  createdAt: [NewConnectionCreatedAt]
  updatedAt: [NewConnectionUpdatedAt]
  Titre: [NewConnectionTitre]
  Description: [NewConnectionDescription]
  Image: [NewConnectionImage]
  section: [NewConnectionSection]
}

input NewInput {
  Titre: String
  Description: String
  Image: ID
  section: ID
}

type Page {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Nom: String
  backgrounds: Background
}

type PageAggregator {
  count: Int
}

type PageConnection {
  values: [Page]
  groupBy: PageGroupBy
  aggregate: PageAggregator
}

type PageConnection_id {
  key: ID
  connection: PageConnection
}

type PageConnectionBackgrounds {
  key: ID
  connection: PageConnection
}

type PageConnectionCreatedAt {
  key: DateTime
  connection: PageConnection
}

type PageConnectionNom {
  key: String
  connection: PageConnection
}

type PageConnectionUpdatedAt {
  key: DateTime
  connection: PageConnection
}

type PageGroupBy {
  _id: [PageConnection_id]
  createdAt: [PageConnectionCreatedAt]
  updatedAt: [PageConnectionUpdatedAt]
  Nom: [PageConnectionNom]
  backgrounds: [PageConnectionBackgrounds]
}

input PageInput {
  Nom: String
  backgrounds: ID
}

type Query {
  background(id: ID!): Background
  backgrounds(sort: String, limit: Int, start: Int, where: JSON): [Background]
  backgroundsConnection(sort: String, limit: Int, start: Int, where: JSON): BackgroundConnection
  evenement(id: ID!): Evenement
  evenements(sort: String, limit: Int, start: Int, where: JSON): [Evenement]
  evenementsConnection(sort: String, limit: Int, start: Int, where: JSON): EvenementConnection
  new(id: ID!): New
  news(sort: String, limit: Int, start: Int, where: JSON): [New]
  newsConnection(sort: String, limit: Int, start: Int, where: JSON): NewConnection
  page(id: ID!): Page
  pages(sort: String, limit: Int, start: Int, where: JSON): [Page]
  pagesConnection(sort: String, limit: Int, start: Int, where: JSON): PageConnection
  section(id: ID!): Section
  sections(sort: String, limit: Int, start: Int, where: JSON): [Section]
  sectionsConnection(sort: String, limit: Int, start: Int, where: JSON): SectionConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Section {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Nom: String
  background: Background
  Logo: UploadFile
  Titre: String
  news(sort: String, limit: Int, start: Int, where: JSON): [New]
  evenements(sort: String, limit: Int, start: Int, where: JSON): [Evenement]
}

type SectionAggregator {
  count: Int
}

type SectionConnection {
  values: [Section]
  groupBy: SectionGroupBy
  aggregate: SectionAggregator
}

type SectionConnection_id {
  key: ID
  connection: SectionConnection
}

type SectionConnectionBackground {
  key: ID
  connection: SectionConnection
}

type SectionConnectionCreatedAt {
  key: DateTime
  connection: SectionConnection
}

type SectionConnectionLogo {
  key: ID
  connection: SectionConnection
}

type SectionConnectionNom {
  key: String
  connection: SectionConnection
}

type SectionConnectionTitre {
  key: String
  connection: SectionConnection
}

type SectionConnectionUpdatedAt {
  key: DateTime
  connection: SectionConnection
}

type SectionGroupBy {
  _id: [SectionConnection_id]
  createdAt: [SectionConnectionCreatedAt]
  updatedAt: [SectionConnectionUpdatedAt]
  Nom: [SectionConnectionNom]
  background: [SectionConnectionBackground]
  Logo: [SectionConnectionLogo]
  Titre: [SectionConnectionTitre]
}

input SectionInput {
  Nom: String
  background: ID
  Logo: ID
  Titre: String
  news: [ID]
  evenements: [ID]
}

input updateBackgroundInput {
  where: InputID
  data: BackgroundInput
}

type updateBackgroundPayload {
  background: Background
}

input updateEvenementInput {
  where: InputID
  data: EvenementInput
}

type updateEvenementPayload {
  evenement: Evenement
}

input updateNewInput {
  where: InputID
  data: NewInput
}

type updateNewPayload {
  new: New
}

input updatePageInput {
  where: InputID
  data: PageInput
}

type updatePagePayload {
  page: Page
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSectionInput {
  where: InputID
  data: SectionInput
}

type updateSectionPayload {
  section: Section
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
